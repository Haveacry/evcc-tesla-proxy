*** evcc/vehicle/tesla.go	2024-02-24 08:34:28.285811074 +0800
--- evcc/vehicle/tesla.go.new	2024-02-24 08:36:39.811461111 +0800
***************
*** 8,14 ****
  	"github.com/evcc-io/evcc/api"
  	"github.com/evcc-io/evcc/util"
  	"github.com/evcc-io/evcc/util/request"
! 	"github.com/evcc-io/evcc/util/sponsor"
  	"github.com/evcc-io/evcc/util/transport"
  	"github.com/evcc-io/evcc/vehicle/tesla"
  	teslaclient "github.com/evcc-io/tesla-proxy-client"
--- 8,14 ----
  	"github.com/evcc-io/evcc/api"
  	"github.com/evcc-io/evcc/util"
  	"github.com/evcc-io/evcc/util/request"
! //	"github.com/evcc-io/evcc/util/sponsor"
  	"github.com/evcc-io/evcc/util/transport"
  	"github.com/evcc-io/evcc/vehicle/tesla"
  	teslaclient "github.com/evcc-io/tesla-proxy-client"
***************
*** 98,104 ****
  	pc := request.NewClient(log)
  	pc.Transport = &transport.Decorator{
  		Decorator: transport.DecorateHeaders(map[string]string{
! 			"X-Auth-Token": sponsor.Token,
  		}),
  		Base: hc.Transport,
  	}
--- 98,104 ----
  	pc := request.NewClient(log)
  	pc.Transport = &transport.Decorator{
  		Decorator: transport.DecorateHeaders(map[string]string{
! 			"X-Auth-Token": "gibberish",
  		}),
  		Base: hc.Transport,
  	}
*** evcc/vehicle/tesla/controller.go    2024-04-07 10:07:05.283869937 +0800
--- evcc/vehicle/tesla/controller.go.new        2024-04-07 10:09:18.578318067 +0800
***************
*** 7,17 ****

        "github.com/evcc-io/evcc/api"
        "github.com/evcc-io/evcc/provider"
!       "github.com/evcc-io/evcc/util/sponsor"
        "github.com/evcc-io/tesla-proxy-client"
  )

! const ProxyBaseUrl = "https://tesla.evcc.io"

  type Controller struct {
        vehicle *tesla.Vehicle
--- 7,17 ----

        "github.com/evcc-io/evcc/api"
        "github.com/evcc-io/evcc/provider"
! //    "github.com/evcc-io/evcc/util/sponsor"
        "github.com/evcc-io/tesla-proxy-client"
  )

! const ProxyBaseUrl = "https://your.tesla.proxy"

  type Controller struct {
        vehicle *tesla.Vehicle
***************
*** 41,49 ****

  // MaxCurrent implements the api.CurrentController interface
  func (v *Controller) MaxCurrent(current int64) error {
!       if !sponsor.IsAuthorized() {
!               return api.ErrSponsorRequired
!       }

        v.current = current
        v.dataG.Reset()
--- 41,49 ----

  // MaxCurrent implements the api.CurrentController interface
  func (v *Controller) MaxCurrent(current int64) error {
! //    if !sponsor.IsAuthorized() {
! //            return api.ErrSponsorRequired
! //    }

        v.current = current
        v.dataG.Reset()
***************
*** 62,70 ****

  // ChargeEnable implements the api.ChargeController interface
  func (v *Controller) ChargeEnable(enable bool) error {
!       if !sponsor.IsAuthorized() {
!               return api.ErrSponsorRequired
!       }

        var err error

--- 62,70 ----

  // ChargeEnable implements the api.ChargeController interface
  func (v *Controller) ChargeEnable(enable bool) error {
! //    if !sponsor.IsAuthorized() {
! //            return api.ErrSponsorRequired
! //    }

        var err error


